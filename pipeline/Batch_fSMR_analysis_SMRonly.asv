clear all
close all
format long;
currentFolder = pwd;
addpath('report_functions\');
addpath('helper_functions\');
addpath('plotting_functions\');

%% Define path to instruction sheet

%%%%%%%%%%%%%%%%%%%%%  Input instruction sheet %%%%%%%%%%%%%%%%%%%%%%%%

% Specify path to fSMR_readout_instruction sheet
fprintf('\nGetting fSMR_readout_instruction sheet...\n')
[input_info.instruction_filename, input_info.instruction_dir, exist_pmt] = uigetfile('../*.*','Select fSMR_readout_instruction sheet',' ');

instruction_path = [input_info.instruction_dir,'\',input_info.instruction_filename];
% Accessing paired data through FBM_metadata_assembly_instruction sheet
opts = detectImportOptions(instruction_path);
opts = setvartype(opts,'string');
instruction = readtable(instruction_path,opts);


%% PMT analysis parameters
    analysis_params_pmt.Peak_length = 100; % estimated peak length
    analysis_params_pmt.datasize = 2e4;   % establish a segment size (~32Mbytes)
    
    analysis_params_pmt.Baseline_rough_cutoff = -20; % default is -20 for populational fSMR experiments where light source is always on
    analysis_params_pmt.med_filt_length = 5; %full PMT data median filter window size, default 50
    analysis_params_pmt.moving_average_window_size = 5; %full PMT data moving-average filter window size, default 5    
    analysis_params_pmt.med_filt_window_size = 3*analysis_params_pmt.Peak_length ; % baseline median filter window size, sampling distance for extrapolating flat baseline   
    analysis_params_pmt.min_distance_btw_peaks = 50; % minimum distance between peaks, for identifying unique peaks
    analysis_params_pmt.uni_peak_range_ext = 5; % number of data points from each side of detection cutoff to be considered as part of the peak
    analysis_params_pmt.uni_peak_baseline_window_size = 100; % length of data points from each side of detection cutoff to compute the local baseline
    
    analysis_params_pmt.fxm_baseline_choice = 3;
    
    % for upstream compensation
    analysis_params_pmt. upstream_compen = 0; % 0- no compensation from upstream channel of fxm channel to initialize
    % For signal QC filtering
    analysis_params_pmt.thresh_baselineDiff_over_sig = 0.05; % cutoff for left-right baseline height difference normalized by the signal amplitude
    analysis_params_pmt.thresh_base_slope = 2*10^-3; % cutoff for left-right baseline slopes
    analysis_params_pmt.thresh_base_height_range = 0.02;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Initialize analysis and report parameters
batch_log = table();
[instruction_rootdir,~,~] = fileparts(instruction_path);

time_stamp = datestr(datetime("now"),"yyyymmddTHHMMSS");
instruction_path_name = strsplit(input_info.instruction_filename,".");
batch_log_name = ['Batch_process_log_',char(instruction_path_name(1:end-1)),'_',time_stamp,'.txt'];
%%
for i = 1:length(instruction.path)
    warning('off','all')
    % load revelent parameters for each sample
    % pmt sample-based params
    analysis_params_pmt.detect_thresh_pmt(1)= str2double(instruction.pmt_1_detection_threshold(i));
    analysis_params_pmt.detect_thresh_pmt(2)= str2double(instruction.pmt_2_detection_threshold(i));
    analysis_params_pmt.detect_thresh_pmt(3)= str2double(instruction.pmt_3_detection_threshold(i));
    analysis_params_pmt.detect_thresh_pmt(4)= str2double(instruction.pmt_4_detection_threshold(i));
    analysis_params_pmt.detect_thresh_pmt(5)= str2double(instruction.pmt_5_detection_threshold(i));
    % pairing sample-based params
    analysis_params_pair.min_time_threshold = str2double(instruction.pairing_window_cutoff_low(i));
    analysis_params_pair.max_time_threshold = str2double(instruction.pairing_window_cutoff_high(i));
    analysis_params_pair.chip_id = char(instruction.chip_id(i));
    analysis_params_pair.hz2pg_factor = str2double(instruction.hz2pg_factor(i));
    try 
        %initiate SMR analysis
        SMR_readout(instruction.path(i));

        %Grabe datetime of each sample data collection
        sample_path = strsplit(instruction.path(i),'\');
        sample_name = sample_path(end-1);
        S = dir(fullfile(instruction.path(i) ,sample_name));
        time_stamp = datestr(S.date,"yyyymmddTHHMMSS");
        
        err_message = 'none';
        err_identifier = 'none';
    catch e
        pmt_log_temp = -999;
        rpt_log_temp = [-999,-999,-999,-999];
        err_message = e.message;
        err_identifier = e.identifier;
        time_stamp = 'none';
    end
    
    
    %Add to batch process log
    sample_path_names = strsplit(instruction.path(i),"\");
    batch_log.path(i) = instruction.path(i);
    batch_log.sample_ID(i) = sample_path_names(end-1);
    batch_log.sample_collectiontime(i)=string(time_stamp);
    batch_log.pct_PMT_QCpass(i) = pmt_log_temp;
    batch_log.pct_SMR_paired(i) = rpt_log_temp(1);
    batch_log.pct_PMT_paired(i) = rpt_log_temp(2);
    batch_log.pct_dropout(i) = rpt_log_temp(3);
    batch_log.n_paired_cells(i) = rpt_log_temp(4);
    batch_log.processed_time(i) = datetime;
    batch_log.error_identifier(i) = string(err_identifier);
    batch_log.error_message(i) = string(err_message);
    clc
    % save log
    disp(batch_log)
    cd(instruction_rootdir)
    writetable(batch_log,batch_log_name,'Delimiter','\t','WriteRowNames',true) %tab delimited
    disp('Batch process log top rows:')
    head(batch_log)
    cd(currentFolder)
        
    warning('on','all') %% DO NOT delete this line
end

